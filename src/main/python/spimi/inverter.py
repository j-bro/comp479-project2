import sys
import os

from dictionary import DictionaryFile, DictionaryFileLine


class SpimiInverter:
    def __init__(self, tokens, block_size_limit_mb, output_file_prefix='block_out', output_directory='out'):
        """
        SPIMI inverter.
        :param tokens: list of token tuples to be inverted (term, docID)
        :param block_size_limit_mb: maximum size of a block
        :param output_file_prefix: prefix for the 'block' files
        :param output_directory: directory to save output files
        """
        self.tokens_iter = iter(tokens)
        self.block_size_limit_mb = block_size_limit_mb
        self.output_file_prefix = output_file_prefix
        self.output_directory = output_directory
        self.block_num = 0

        if not os.path.exists(self.output_directory):
            os.mkdir(self.output_directory)

    def run(self):
        """
        Run the invert task.
        :return: the list of DictionaryFiles generated by the inverting.
        """
        output_files = list()
        done = False
        while not done:
            dictionary = dict()
            try:
                # Artificially limit memory size
                while sys.getsizeof(dictionary) / 1024 / 1024 <= self.block_size_limit_mb:
                    token = self.tokens_iter.next()
                    if token[0] not in dictionary:
                        postings_list = self._add_to_dictionary(dictionary, token[0])
                    else:
                        postings_list = self._get_postings_list(dictionary, token[0])

                    self._add_to_postings_list(postings_list, token[1])
            except StopIteration:
                print("Finished iterating through token list")
                done = True

            sorted_terms = self._sort_terms(dictionary)
            dict_file = self._write_block_to_disk(sorted_terms, dictionary)
            self.block_num += 1
            output_files.append(dict_file)

        return output_files

    @staticmethod
    def _add_to_dictionary(dictionary, term):
        """
        Add the specified term to the specified dictionary.
        :param dictionary: the dictionary to add the term to.
        :param term: the term to be added.
        :return: the [empty] postings list of the new term in the dictionary.
        """
        dictionary[term] = list()
        return dictionary[term]

    @staticmethod
    def _get_postings_list(dictionary, term):
        """
        Get the postings list of the specified term int he specified dictionary.
        :param dictionary:
        :param term:
        :return:
        """
        return dictionary[term]

    @staticmethod
    def _add_to_postings_list(postings_list, doc_id):
        """
        Append the specified docID to the specified postings list
        :param postings_list:
        :param doc_id:
        """
        postings_list.append(doc_id)

    @staticmethod
    def _sort_terms(dictionary):
        """
        Sort the terms in a specified dictionary
        :param dictionary: the dictionary to sort.
        :return: A list containing all dictionary terms sorted lexicographically.
        """
        return [term for term in sorted(dictionary.keys())]

    def _write_block_to_disk(self, sorted_terms, dictionary):
        """
        Write the specified dictionary to a file in the order specified by the sorted terms list
        :param sorted_terms: the order in which to write the terms.
        :param dictionary: the dictionary of terms to write.
        :return: the DictionaryFile to which the dictionary was written.
        """
        file_name = '{}block{}.{}'.format(self.output_file_prefix, self.block_num, 'txt')
        file_path = os.path.join(self.output_directory, file_name)
        dict_file = DictionaryFile(file_path)
        dict_file.open_handle(mode='w')

        for term in sorted_terms:
            line_obj = DictionaryFileLine(list(), term, dictionary[term])
            dict_file.write_line(line_obj)

        dict_file.close_handle()
        return dict_file
